generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Build {
  id          Int      @id @unique @default(autoincrement())
  title       String   @db.VarChar(150)
  description String?
  slug        String?
  race        Race     @default(NULL)
  v_race      Race     @default(NULL)
  is_public   Boolean  @default(false)
  created_at  DateTime @default(now())
  created_by  Int
  updated_at  DateTime @updatedAt
  user_id     Int

  user    User @relation(fields: [user_id], references: [id], onDelete: Cascade, name: "userRelation")
  created User @relation(fields: [created_by], references: [id], onDelete: Cascade, name: "creatorRelation")

  steps   Step[]
  Comment Comment[]
  Like    Like[]

  @@map("builds")
}

model Step {
  id          Int    @id @unique @default(autoincrement())
  description String @db.VarChar(150)
  population  Int
  timer       Int
  position    Int
  build_id    Int
  build       Build  @relation(fields: [build_id], references: [id], onDelete: Cascade)

  @@map("steps")
}

model User {
  id               Int       @id @unique @default(autoincrement())
  description      String?
  first_name       String?
  last_name        String?
  username         String    @unique
  email            String    @unique
  password         String
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  role             Role      @default(GUEST)
  refresh_token    String?
  access_token     String?
  token_expires_at DateTime?
  id_token         Int?

  Comment Comment[]
  Build   Build[]   @relation("userRelation")
  Created Build[]   @relation("creatorRelation")
  Like    Like[]

  @@map("users")
}

model Comment {
  id         Int      @id @unique @default(autoincrement())
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  build_id   Int
  user_id    Int
  build      Build    @relation(fields: [build_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Like       Like[]

  @@map("comments")
}

model Like {
  id         Int      @id @default(autoincrement())
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  comment_id Int
  build_id   Int?
  user_id    Int

  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  Build   Build?  @relation(fields: [build_id], references: [id])

  @@map("likes")
}

enum Role {
  GUEST
  USER
  ADMIN
}

enum Race {
  ZERG
  TERRAN
  PROTOSS
  NULL
  ALL
}
